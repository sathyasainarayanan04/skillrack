package leetcode;
class HouseRobberII {
    public int houseRobber(int[] houses){
        int[] dp = new int[houses.length];
        if(houses.length==0)return 0;
        if(houses.length==1)return houses[0];
        if(houses.length==2)return Math.max(houses[1],houses[0]);
        dp[0]=houses[0];
        dp[1]=Math.max(houses[0],houses[1]);
        for(int index=2;index<houses.length;index++){
            dp[index] = Math.max((dp[index-2]+houses[index]),dp[index-1]);
        }
        return dp[houses.length-1];
    }
    public int rob(int[] nums) {
        int length = nums.length-1;
        if(nums.length==1)return nums[0];
        if(nums.length==2)return Math.max(nums[0],nums[1]);
        int skipFirstHouse[] = new int[length];
        int skipLastHouse[] = new int[length];
        for(int index=0;index<nums.length-1;index++){
            skipFirstHouse[index]=nums[index+1];
            skipLastHouse[index]=nums[index];
        }
        int skipFirstHouseCost = houseRobber(skipFirstHouse);
        int skipLastHouseCost = houseRobber(skipLastHouse);
        return Math.max(skipFirstHouseCost, skipLastHouseCost);
    }
    public static void main(String[] args){
        HouseRobberII obj = new HouseRobberII();
        int nums[] = {2,3,2};
        System.out.println(obj.rob(nums));
    }
}
